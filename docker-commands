docker pull ubuntu
docker images
docker ps
docker ps -a
docker run -it --name test-container containerID
docker run -dt --name test-conatiner conatinerID
cntrl pq (To exit the running container)
docker exec -it containerID /bin/bash
cntrl pq (To exit from the running container without stopping)
docker system df -v
docker system df 
docker rmi imageID
docker rm containerID
docker stop containerID
docker start containerID
docker attach containerID
docker container ls -s (To list the container)
docker rm -f $(docker ps -a -q) (To delete running containers)
docker rmi -f $(docker images -aq) (To delete all images)
docker volume rm $(docker volume ls -q) To delete the volumes
docker kill $(docker ps -q)
docker stats ContainerID (To offer the statistics of a running container)
docker pause ContainerID
docker unpause ContainerID
docker kill ContainerID
docker restart container_name




sudo chown -R jenkins:jenkins /var/lib/jenkins
 
sudo chmod 666 /var/run/docker.sock



pipeline script:

pipeline {
agent any
 
environment {
      NEXUS_VERSION = "nexus3"
      NEXUS_PROTOCOL = "http"
      NEXUS_URL = "172.31.39.0:8081"
      NEXUS_REPOSITORY = "release"
      NEXUS_CREDENTIAL_ID = "nexus-cred"
      NEXUS_RELEASE = "1.0.0"
      imagename = "210150738889.dkr.ecr.us-east-1.amazonaws.com/batch41"
      registryCredential = 'aws-cred'
      dockerImage = ''
    }
 
tools {
   jdk 'Java21'
   maven 'Maven3'
     }
stages{
    stage('Git Clone'){
        steps{
         git branch: 'main',
          url: 'https://github.com/chinni4321/my-java-project.git'
        }
    }
  stage('Maven build'){
        steps{
         sh 'mvn clean package' 
        }
    }
  stage ('Sonarqube Analysis'){
           steps {
           withSonarQubeEnv('Sonarqube') {
           sh '''
           mvn -e -B sonar:sonar -Dsonar.java.source=1.8  -Dsonar.sourceEncoding=UTF-8
           '''
           }
         }
      }
    stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: NEXUS_RELEASE,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
stage('Building image') {
    steps{
      script {
         dockerImage = docker.build imagename
       }
     }
  }
    stage('Deploy Image') {
      steps{
      script {
        withCredentials([aws(credentialsId: "aws-cred")]) {
        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 210150738889.dkr.ecr.us-east-1.amazonaws.com"
        docker.withRegistry('https://210150738889.dkr.ecr.us-east-1.amazonaws.com/batch41:aws-cred')  {
         dockerImage.push("$BUILD_NUMBER")
         dockerImage.push('latest')
        }
       }
      }
     }
    }
      stage('Remove Unused docker image') {
        steps{
         sh "docker rmi $imagename:$BUILD_NUMBER"
         sh "docker rmi $imagename:latest"
       }
      }
    }
}
