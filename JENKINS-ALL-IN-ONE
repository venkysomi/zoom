#pipeline for maven build only:

pipeline {
       agent any
 
tools {
    jdk 'Java21'
    maven 'Maven3'
}
stages {
 
  stage ('Git checkout') {
    steps {
        git branch: 'main', url: 'https://github.com/venkysomi/Project-23.0.git'
         }
      }
   }
} 




#pipeline build for only sonarqube:

pipeline {
agent any
 
tools {
   jdk 'Java21'
   maven 'Maven3'
     }
stages{
    stage('Git Clone'){
        steps{
         git branch: 'main',
          url: 'https://github.com/venkysomi/Project-23.0.git'
        }
    }
  stage('Maven build'){
        steps{
         sh 'mvn clean package' 
        }
    }
  stage ('Sonarqube Analysis'){
           steps {
           withSonarQubeEnv('Sonarqube') {
           sh '''
           mvn -e -B sonar:sonar -Dsonar.java.source=1.8  -Dsonar.sourceEncoding=UTF-8
           '''
           }
         }
      }
  }
}


#Pipeline nexus:

pipeline {
agent any
 
environment {
      NEXUS_VERSION = "nexus3"
      NEXUS_PROTOCOL = "http"
      NEXUS_URL = "172.31.31.139:8081"
      NEXUS_REPOSITORY = "unrelease"
      NEXUS_CREDENTIAL_ID = "nexus-cred"
      NEXUS_RELEASE = "1.0.0"
    }
 
tools {
   jdk 'Java21'
   maven 'Maven3'
     }
stages{
    stage('Git Clone'){
        steps{
         git branch: 'main',
          url: 'https://github.com/venkysomi/Java-working-repo.git'
        }
    }
  stage('Maven build'){
        steps{
         sh 'mvn clean package' 
        }
    }
  stage ('Sonarqube Analysis'){
           steps {
           withSonarQubeEnv('Sonarqube') {
           sh '''
           mvn -e -B sonar:sonar -Dsonar.java.source=1.8  -Dsonar.sourceEncoding=UTF-8
           '''
           }
         }
      }
    stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: NEXUS_RELEASE,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
  }
}












#pipeline docker:



pipeline {

agent any
 
environment {

      NEXUS_VERSION = "nexus3"

      NEXUS_PROTOCOL = "http"

      NEXUS_URL = "172.31.39.0:8081"

      NEXUS_REPOSITORY = "release"

      NEXUS_CREDENTIAL_ID = "nexus-cred"

      NEXUS_RELEASE = "1.0.0"

      imagename = "210150738889.dkr.ecr.us-east-1.amazonaws.com/batch41"

      registryCredential = 'aws-cred'

      dockerImage = ''

    }
 
tools {

   jdk 'Java21'

   maven 'Maven3'

     }

stages{

    stage('Git Clone'){

        steps{

         git branch: 'main',

          url: 'https://github.com/chinni4321/my-java-project.git'

        }

    }

  stage('Maven build'){

        steps{

         sh 'mvn clean package' 

        }

    }

  stage ('Sonarqube Analysis'){

           steps {

           withSonarQubeEnv('Sonarqube') {

           sh '''

           mvn -e -B sonar:sonar -Dsonar.java.source=1.8  -Dsonar.sourceEncoding=UTF-8

           '''

           }

         }

      }

    stage("Publish to Nexus Repository Manager") {

            steps {

                script {

                    pom = readMavenPom file: "pom.xml";

                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");

                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"

                    artifactPath = filesByGlob[0].path;

                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {

                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(

                            nexusVersion: NEXUS_VERSION,

                            protocol: NEXUS_PROTOCOL,

                            nexusUrl: NEXUS_URL,

                            groupId: pom.groupId,

                            version: NEXUS_RELEASE,

                            repository: NEXUS_REPOSITORY,

                            credentialsId: NEXUS_CREDENTIAL_ID,

                            artifacts: [

                                [artifactId: pom.artifactId,

                                classifier: '',

                                file: artifactPath,

                                type: pom.packaging],

                                [artifactId: pom.artifactId,

                                classifier: '',

                                file: "pom.xml",

                                type: "pom"]

                            ]

                        );

                    } else {

                        error "*** File: ${artifactPath}, could not be found";

                    }

                }

            }

        }

stage('Building image') {

    steps{

      script {

         dockerImage = docker.build imagename

       }

     }

  }

    stage('Deploy Image') {

      steps{

      script {

        withCredentials([aws(credentialsId: "aws-cred")]) {

        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 210150738889.dkr.ecr.us-east-1.amazonaws.com"

        docker.withRegistry('https://210150738889.dkr.ecr.us-east-1.amazonaws.com/batch41:aws-cred')  {

         dockerImage.push("$BUILD_NUMBER")

         dockerImage.push('latest')

        }

       }

      }

     }

    }

      stage('Remove Unused docker image') {

        steps{

         sh "docker rmi $imagename:$BUILD_NUMBER"

         sh "docker rmi $imagename:latest"

       }

      }

    }

}






## install pipeline stage view plugin to see the status.



jenkins default port: 8080
sonarqube default port: 9000
sonarnexus defualt port: 8081

